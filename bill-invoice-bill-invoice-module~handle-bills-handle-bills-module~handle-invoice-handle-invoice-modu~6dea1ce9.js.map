{"version":3,"sources":["webpack:///./node_modules/typescript-string-operations/dist/index.min.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kDAAkD,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA,mCAAmC;AACnC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,IAAI;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,EAAE,KAAK,EAAE,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO,EAAE,KAAK,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC,2BAA2B,aAAa;AACxC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD","file":"bill-invoice-bill-invoice-module~handle-bills-handle-bills-module~handle-invoice-handle-invoice-modu~6dea1ce9.js","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringBuilder = exports.String = void 0;\nvar String = (function () {\n    function String() {\n    }\n    String.IsNullOrWhiteSpace = function (value) {\n        try {\n            if (value == null || value == 'undefined') {\n                return true;\n            }\n            return value.toString().replace(/\\s/g, '').length < 1;\n        }\n        catch (e) {\n            console.log(e);\n            return false;\n        }\n    };\n    String.Join = function (delimiter) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        try {\n            var firstArg = args[0];\n            if (Array.isArray(firstArg) || firstArg instanceof Array) {\n                var tempString = String.Empty;\n                var count = 0;\n                for (var i = 0; i < firstArg.length; i++) {\n                    var current = firstArg[i];\n                    if (i < firstArg.length - 1) {\n                        tempString += current + delimiter;\n                    }\n                    else {\n                        tempString += current;\n                    }\n                }\n                return tempString;\n            }\n            else if (typeof firstArg === 'object') {\n                var tempString_1 = String.Empty;\n                var objectArg_1 = firstArg;\n                var keys = Object.keys(firstArg);\n                keys.forEach(function (element) { tempString_1 += objectArg_1[element] + delimiter; });\n                tempString_1 = tempString_1.slice(0, tempString_1.length - delimiter.length);\n                return tempString_1;\n            }\n            var stringArray = args;\n            return String.join.apply(String, __spreadArrays([delimiter], stringArray));\n        }\n        catch (e) {\n            console.log(e);\n            return String.Empty;\n        }\n    };\n    String.Format = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        try {\n            if (format.match(String.regexNumber)) {\n                return String.format(String.regexNumber, format, args);\n            }\n            if (format.match(String.regexObject)) {\n                return String.format(String.regexObject, format, args, true);\n            }\n            return format;\n        }\n        catch (e) {\n            console.log(e);\n            return String.Empty;\n        }\n    };\n    String.format = function (regex, format, args, parseByObject) {\n        if (parseByObject === void 0) { parseByObject = false; }\n        return format.replace(regex, function (match, x) {\n            var s = match.split(':');\n            if (s.length > 1) {\n                x = s[0].replace('{', '');\n                match = s[1].replace('}', '');\n            }\n            var arg;\n            if (parseByObject) {\n                arg = args[0][x];\n            }\n            else {\n                arg = args[x];\n            }\n            if (arg == null || arg == undefined || match.match(/{\\d+}/)) {\n                return arg;\n            }\n            arg = String.parsePattern(match, arg);\n            return typeof arg != 'undefined' && arg != null ? arg : String.Empty;\n        });\n    };\n    String.parsePattern = function (match, arg) {\n        switch (match) {\n            case 'L': {\n                arg = arg.toLocaleLowerCase();\n                return arg;\n            }\n            case 'U': {\n                arg = arg.toLocaleUpperCase();\n                return arg;\n            }\n            case 'd': {\n                if (typeof (arg) === 'string') {\n                    return String.getDisplayDateFromString(arg);\n                }\n                else if (arg instanceof Date) {\n                    return String.Format('{0:00}.{1:00}.{2:0000}', arg.getDate(), arg.getMonth(), arg.getFullYear());\n                }\n                break;\n            }\n            case 's': {\n                if (typeof (arg) === 'string') {\n                    return String.getSortableDateFromString(arg);\n                }\n                else if (arg instanceof Date) {\n                    return String.Format('{0:0000}-{1:00}-{2:00}', arg.getFullYear(), arg.getMonth(), arg.getDate());\n                }\n                break;\n            }\n            case 'n': {\n                if (typeof (arg) !== \"string\")\n                    arg = arg.toString();\n                var replacedString = arg.replace(/,/g, '.');\n                if (isNaN(parseFloat(replacedString)) || replacedString.length <= 3) {\n                    break;\n                }\n                var numberparts = replacedString.split(/[^0-9]+/g);\n                var parts = numberparts;\n                if (numberparts.length > 1) {\n                    parts = [String.join.apply(String, __spreadArrays([''], (numberparts.splice(0, numberparts.length - 1)))), numberparts[numberparts.length - 1]];\n                }\n                var integer = parts[0];\n                var mod = integer.length % 3;\n                var output = (mod > 0 ? (integer.substring(0, mod)) : String.Empty);\n                var firstGroup = output;\n                var remainingGroups = integer.substring(mod).match(/.{3}/g);\n                output = output + '.' + String.Join('.', remainingGroups);\n                arg = output + (parts.length > 1 ? ',' + parts[1] : '');\n                return arg;\n            }\n            case 'x': {\n                return this.decimalToHexString(arg);\n            }\n            case 'X': {\n                return this.decimalToHexString(arg, true);\n            }\n            default: {\n                break;\n            }\n        }\n        if ((typeof (arg) === 'number' || !isNaN(arg)) && !isNaN(+match) && !String.IsNullOrWhiteSpace(arg)) {\n            return String.formatNumber(arg, match);\n        }\n        return arg;\n    };\n    String.decimalToHexString = function (value, upperCase) {\n        if (upperCase === void 0) { upperCase = false; }\n        var parsed = parseFloat(value);\n        var hexNumber = parsed.toString(16);\n        return upperCase ? hexNumber.toLocaleUpperCase() : hexNumber;\n    };\n    String.getDisplayDateFromString = function (input) {\n        var splitted;\n        splitted = input.split('-');\n        if (splitted.length <= 1) {\n            return input;\n        }\n        var day = splitted[splitted.length - 1];\n        var month = splitted[splitted.length - 2];\n        var year = splitted[splitted.length - 3];\n        day = day.split('T')[0];\n        day = day.split(' ')[0];\n        return day + \".\" + month + \".\" + year;\n    };\n    String.getSortableDateFromString = function (input) {\n        var splitted = input.replace(',', '').split('.');\n        if (splitted.length <= 1) {\n            return input;\n        }\n        var times = splitted[splitted.length - 1].split(' ');\n        var time = String.Empty;\n        if (times.length > 1) {\n            time = times[times.length - 1];\n        }\n        var year = splitted[splitted.length - 1].split(' ')[0];\n        var month = splitted[splitted.length - 2];\n        var day = splitted[splitted.length - 3];\n        var result = year + \"-\" + month + \"-\" + day;\n        if (!String.IsNullOrWhiteSpace(time) && time.length > 1) {\n            result += \"T\" + time;\n        }\n        else {\n            result += \"T00:00:00\";\n        }\n        return result;\n    };\n    String.formatNumber = function (input, formatTemplate) {\n        var count = formatTemplate.length;\n        var stringValue = input.toString();\n        if (count <= stringValue.length) {\n            return stringValue;\n        }\n        var remainingCount = count - stringValue.length;\n        remainingCount += 1;\n        return new Array(remainingCount).join('0') + stringValue;\n    };\n    String.join = function (delimiter) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var temp = String.Empty;\n        for (var i = 0; i < args.length; i++) {\n            if ((typeof args[i] == 'string' && String.IsNullOrWhiteSpace(args[i]))\n                || (typeof args[i] != \"number\" && typeof args[i] != \"string\")) {\n                continue;\n            }\n            var arg = \"\" + args[i];\n            temp += arg;\n            for (var i2 = i + 1; i2 < args.length; i2++) {\n                if (String.IsNullOrWhiteSpace(args[i2])) {\n                    continue;\n                }\n                temp += delimiter;\n                i = i2 - 1;\n                break;\n            }\n        }\n        return temp;\n    };\n    String.regexNumber = /{(\\d+(:\\w*)?)}/g;\n    String.regexObject = /{(\\w+(:\\w*)?)}/g;\n    String.Empty = '';\n    return String;\n}());\nexports.String = String;\nvar StringBuilder = (function () {\n    function StringBuilder(value) {\n        this.Values = [];\n        if (!String.IsNullOrWhiteSpace(value)) {\n            this.Values = new Array(value);\n        }\n    }\n    StringBuilder.prototype.ToString = function () {\n        return this.Values.join('');\n    };\n    StringBuilder.prototype.Append = function (value) {\n        this.Values.push(value);\n    };\n    StringBuilder.prototype.AppendLine = function (value) {\n        this.Values.push('\\r\\n' + value);\n    };\n    StringBuilder.prototype.AppendFormat = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.Values.push(String.Format.apply(String, __spreadArrays([format], args)));\n    };\n    StringBuilder.prototype.AppendLineFormat = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.Values.push(\"\\r\\n\" + String.Format.apply(String, __spreadArrays([format], args)));\n    };\n    StringBuilder.prototype.Clear = function () {\n        this.Values = [];\n    };\n    return StringBuilder;\n}());\nexports.StringBuilder = StringBuilder;\n"],"sourceRoot":""}